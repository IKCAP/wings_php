[discreteInstancesAreDiscrete: 
  print(Firing discreteInstancesAreDiscrete) 
  (?x rdf:type dcdom:DiscreteInstance) -> (?x dcdom:isDiscrete "true"^^xsd:boolean),
  print(Setting ?x dcdom:isDiscrete true because ?x is DiscreteInstance)]




[continuousInstancesAreNotDiscrete:
   print(Firing continuousInstancesAreNotDiscrete)
   (?x rdf:type dcdom:ContinuousInstance) -> (?x dcdom:isDiscrete "false"^^xsd:boolean),
   print(Setting ?x dcdom:isDiscrete false because ?x is ContinuousInstance)]

[instancesThatAreNotDiscreteAreContinuous:
  print(Firing instancesThatAreNotDiscreteAreContinuous)
  (?x dcdom:isDiscrete "false"^^xsd:boolean) 
  (?x rdf:type dcdom:Instance) -> (?x rdf:type dcdom:ContinuousInstance),
  print(Setting ?x rdf:type to Instance because ?x is discrete)] 

[backwardTransferModelerMetrics: 
 print(Firing backwardTransferModelerMetrics)
      (?c rdf:type pcdom:ModelerClass)
      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "model")
      (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
      (?odv ?p ?val) (?p rdfs:subPropertyOf dc:hasMetrics) -> (?idv ?p ?val),
		 print(Setting, ?p, of Modeler input, ?idv, to, ?val, because the output is set to, ?val)
]

[backwardTransferModelerDataMetrics:
 print(Firing backwardTransferModelerDataMetric)
      (?c rdf:type pcdom:ModelerClass)
      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "model")
      (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
      (?odv ?p ?val) (?p rdfs:subPropertyOf dc:hasDataMetrics) -> (?idv ?p ?val),
		 print(Setting, ?p, of Modeler input, ?idv, to, ?val, because the output is set to, ?val)
]

[backwardLMTModelerMissingValues:
 print(Firing backwardLMTModelerMissingValues)
      (?c rdf:type pcdom:LMTModelerClass) 
     (?c pc:hasInput ?idv) 
     (?idv pc:hasArgumentID "trainingData")  
      -> (?idv dcdom:hasMissingValues "false"^^xsd:boolean),
		 print(Setting hasMissingValues of LMTModeler input, ?idv, to false)
]
       
[backwardID3ModelerMissingValues:
 print(Firing backwardID3ModelerMissingValues)
      (?c rdf:type pcdom:ID3ModelerClass) (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")  
      -> (?idv dcdom:hasMissingValues "false"^^xsd:boolean),
		 print(Setting hasMissingValues of ID3Modeler input, ?idv, to false)
]


# this is not really true
# what is true is that the classIndex can't refer to a non-discrete attribute
# [modelerSpecialCase3:
#        (?c rdf:type pcdom:DTModelerClass) (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")  
#        -> (?idv dcdom:isDiscrete "true"^^xsd:boolean),
# 		 print(Setting isDiscrete of DTModeler input, ?idv, to true)
# ]

[backwardClassifierTransferClassIndex: 
 print(Firing backwardClassifierTransferClassIndex)
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
      (?odv dcdom:hasClassIndex ?val) -> (?idvmodel dcdom:hasClassIndex ?val),
		 print(Setting hasClassIndex of Classifier input model, ?idvmodel, to, ?val, because the hasClassIndex of, ?odv, is, ?val)
]

[backwardClassifierTransferMissingValues:
 print(Firing backwardClassifierTransferMissingValues) 
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
      (?odv dcdom:hasMissingValues ?val) -> (?idvmodel dcdom:hasMissingValues ?val),
		 print(Setting hasMissingValues of Classifier input model, ?idvmodel, to, ?val, because the hasMissingValues of, ?odv, is, ?val)
]

[backwardClassifierTransferNumberOfBins:
 print(Firing backwardClassifierTransferNumberOfBins)
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
      (?odv dcdom:hasNumberOfBins ?val) -> (?idvmodel dcdom:hasNumberOfBins ?val), (?idvdata dcdom:hasNumberOfBins ?val),
		 print(Setting hasNumberOfBins of Classifier input model, ?idvmodel, to, ?val, because the hasNumberOfBins of, ?odv, is, ?val)
]

[backwardClassifierTransferNumberOfClasses:
 print(Firing backwardClassifierTransferNumberOfClasses)
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
      (?odv dcdom:hasNumberOfClasses ?val) -> (?idvmodel dcdom:hasNumberOfClasses ?val),
		 print(Setting hasNumberOfClasses of Classifier input model, ?idvmodel, to, ?val, because the hasNumberOfClasses of, ?odv, is, ?val)
]

[backwardClassifierTransferIsDiscrete: 
 print(Firing backwardClassifierTransferIsDiscrete)
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
      (?odv dcdom:isDiscrete ?val) -> (?idvmodel dcdom:isDiscrete ?val), (?idvdata dcdom:isDiscrete ?val),
		 print(Setting isDiscrete of Classifier inputs, ?idvmodel, and, ?idvdata, to, ?val, because the isDiscrete of, ?odv, is, ?val)
]

[backwardClassifierModelAndTestDataHaveSameDomain:
 print(Firing backwardClassifierModelAndTestDataHaveSameDomain)
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
		 noValue(?idvmodel dcdom:hasDomain) noValue(?idvdata dcdom:hasDomain) 
		 uriConcat(?idvmodel, '_domain', ?dom)
		 -> (?idvmodel dcdom:hasDomain ?dom), (?idvdata dcdom:hasDomain ?dom), 
			 print(Setting domain of, ?idvmodel, and, ?idvdata, to , ?dom, because both inputs to the Classifier should be from the same #domain)
]

[backwardClassifierModelAndTestDataHaveSameArea:
  print(Firing backwardClassifierModelAndTestDataHaveSameArea)
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
		 noValue(?idvmodel dcdom:hasArea) noValue(?idvdata dcdom:hasArea) 
		 uriConcat(?idvmodel, '_area', ?area)
		 -> (?idvmodel dcdom:hasArea ?area), (?idvdata dcdom:hasArea ?area),
			 print(Setting area of, ?idvmodel, and, ?idvdata, to , ?area, because both inputs to the Classifier should be from the same area)
]

[backwardClassifierModelAndTestDataHaveSameNumBins:
  print(Firing backwardClassifierModelAndTestDataHaveSameNumBins)
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
		 noValue(?idvmodel dcdom:hasNumberOfBins) noValue(?idvdata dcdom:hasNumberOfBins) 
		 uriConcat(?idvmodel, '_numBins', ?numBins)
		 -> (?idvmodel dcdom:hasNumberOfBins ?numBins), (?idvdata dcdom:hasNumberOfBins ?numBins),
			 print(Setting numBins of, ?idvmodel, and, ?idvdata, to , ?numBins, because both inputs to the Classifier should have the same number of bins)
]
		
[backwardClassifierModelAndTestDataHaveSameDiscreteness:
 print(Firing backwardClassifierModelAndTestDataHaveSameDiscreteness)
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
		 noValue(?idvmodel dcdom:isDiscrete) noValue(?idvdata dcdom:isDiscrete) 
		 uriConcat(?idvmodel, '_isDiscrete', ?isDiscrete)
		 -> (?idvmodel dcdom:isDiscrete ?isDiscrete), (?idvdata dcdom:isDiscrete ?isDiscrete),
			 print(Setting discreteness of, ?idvmodel, and, ?idvdata, to , ?isDiscrete, because both inputs to the Classifier should have the same discreteness)
]
		
[backwardLMTClassifierMissingValues:
  print(Firing backwardLMTClassifierMissingValues)
      (?c rdf:type pcdom:LMTClassifierClass) 
      (?c pc:hasInput ?idv) 
      (?idvdata pc:hasArgumentID "testData")  
      -> (?idv dcdom:hasMissingValues "false"^^xsd:boolean),
  print(Setting hasMissingValues of LMTClassifier input ?idv, to false)
]

[backwardID3ClassifierMissingValues:
  print(Firing backwardID3ClassifierMissingValues)
      (?c rdf:type pcdom:ID3ClassifierClass)
      (?c pc:hasInput ?idv) 
      (?idvdata pc:hasArgumentID "testData")  
      -> (?idv dcdom:hasMissingValues "false"^^xsd:boolean),
  print(Setting hasMissingValues of ID3Classifier input ?idv, to false)
]


[backwardBayesClassifierRequiresDiscrete:
  print(Firing backwardBayesClassifierRequiresDiscrete)
       (?c rdf:type pcdom:BayesClassifierClass)
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")
       -> (?idvdata dcdom:isDiscrete "true"^^xsd:boolean), 
            (?idvmodel dcdom:isDiscrete "true"^^xsd:boolean),
   print(Setting isDiscrete of BayesClassifier inputs ?idvmodel and ?idvdata to false)
]

[backwardID3ClassifierIsDiscrete:
  print(Firing backwardID3ClassifierIsDiscrete)
         (?c rdf:type pcdom:ID3ClassifierClass)
         (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
         (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")
         -> (?idvdata dcdom:isDiscrete "true"^^xsd:boolean), 
        (?idvmodel dcdom:isDiscrete "true"^^xsd:boolean)
  print(Setting isDiscrete of ?idvdata to true)
]
       
[backwardResampleMetricsTransfer:
  print(Firing backwardResampleMetricsTransfer)
       (?c rdf:type pcdom:ResampleClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?odv ?p ?val) (?p rdfs:subPropertyOf dc:hasMetrics) -> (?idv ?p ?val),
  print(Transferring dc:hasMetrics backward for Resample)]

[backwardResampleDataMetricsTransfer:
 print(Firing backwardResampleDataMetricsTransfer)
      (?c rdf:type pcdom:ResampleClass)
      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
      (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
      (?odv ?p ?val) (?p rdfs:subPropertyOf dc:hasDataMetrics) 
      notEqual(?p dcdom:isSampled) -> (?idv ?p ?val),
 print(Transferring dc:hasDataMetrics backward for Resample)]
       
[backwardRandomizeMetricsTransfer:
  print(Firing backwardRandomizeMetricsTransfer)
       (?c rdf:type pcdom:RandomizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?odv ?p ?val) (?p rdfs:subPropertyOf dc:hasMetrics) -> (?idv ?p ?val),
  print(Transferring dc:hasMetrics backward for Randomize)]

[backwardRandomizeDataMetricsTransfer:
  print(Firing backwardRandomizeDataMetricsTransfer)
       (?c rdf:type pcdom:RandomizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?odv ?p ?val) (?p rdfs:subPropertyOf dc:hasDataMetrics) 
       notEqual(?p dcdom:isRandomized) -> (?idv ?p ?val),
  print(Transferring dc:hasDataMetrics backward for Randomize)]

[backwardRandomizeRDFTypeTransfer:
  print(Firing backwardRandomizeRDFTypeTransfer)
  (?c rdf:type pcdom:RandomizeClass)
  (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
  (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
  (?idv rdf:type ?ot) -> (?odv rdf:type ?ot),
  print(Setting rdf:type of ?idv to ?ot because ?odv has rdf:type ?ot)]

[backwardDiscreteMetricsTransfer:
  print(Firing backwardDiscreteMetricsTransfer)
       (?c rdf:type pcdom:DiscretizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?odv ?p ?val) (?p rdfs:subPropertyOf dc:hasMetrics) -> (?idv ?p ?val),
 print(Transferring dc:hasMetrics backward for Discretize)]

[backwardDiscreteDataMetricsTransfer:
  print(Firing backwardDiscreteDataMetricsTransfer)
      (?c rdf:type pcdom:DiscretizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?odv ?p ?val) (?p rdfs:subPropertyOf dc:hasDataMetrics) 
       notEqual(?p dcdom:isDiscrete) -> (?idv ?p ?val),
 print(Transferring dc:hasDataMetrics backward for Discretize)]

[forwardModelerMetricsTransfer:
  print(Firing forwardModelerMetricsTransfer)
       (?c rdf:type pcdom:ModelerClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "model")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
       (?idv ?p ?val) (?p rdfs:subPropertyOf dc:hasMetrics) -> (?odv ?p ?val),
  print(Transferring dc:hasMetrics forward for ?c)]

[forwardModelerDataMetricsTransfer:
  print(Firing forwardModelerDataMetricsTransfer) 
       (?c rdf:type pcdom:ModelerClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "model")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
       (?idv ?p ?val) (?p rdfs:subPropertyOf dc:hasDataMetrics) 
       notEqual(?p dcdom:isSampled) -> (?odv ?p ?val),
 print(Transferring dc:hasDataMetrics forward ?c)]

[forwardClassifierMetricsTransfer:
  print(Firing forwardClassifierMetricsTransfer) 
      (?c rdf:type pcdom:ClassifierClass)
      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
      (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
      (?idvmodel ?p ?val) (?idvdata ?p ?val) (?p rdfs:subPropertyOf dc:hasMetrics) -> (?odv ?p ?val),
  print(Transferring dc:hasMetrics forward for ?c)]

[forwardClassifierDataMetricsTransfer:
  print(Firing forwardClassifierDataMetricsTransfer)
       (?c rdf:type pcdom:ClassifierClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvmodel dcdom:isDiscrete ?val) (?idvdata dcdom:isDiscrete ?val) -> (?odv dcdom:isDiscrete ?val),
  print(Transferring dc:hasDataMetrics forward for ?c)]

[forwardClassifierTransferNumberOfClasses:
   print(Firing forwardClassifierTransferNumberOfClasses)
       (?c rdf:type pcdom:ClassifierClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvmodel dcdom:hasNumberOfClasses ?val) (?idvdata dcdom:hasNumberOfClasses ?val) -> (?odv dcdom:hasNumberOfClasses ?val),
  print(Setting dcdom:hasNumberOfClasses for ?odv to ?val for ?c)]

[forwardClassifierTransferNumberOfBins:
  print(Firing forwardClassifierTransferNumberOfBins) 
       (?c rdf:type pcdom:ClassifierClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
#       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvmodel dcdom:hasNumberOfBins ?val) (?idvdata dcdom:hasNumberOfBins ?val) -> (?odv dcdom:hasNumberOfBins ?val),
  print(Setting dcdom:hasNumberOfBins for ?odv to ?val for ?c)]

[forwardClassifierTransferNumberOfInstances:
  print(Firing forwardClassifierTransferNumberOfInstances)
       (?c rdf:type pcdom:ClassifierClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
#       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvdata dcdom:hasNumberOfInstances ?val) -> (?odv dcdom:hasNumberOfInstances ?val),
  print(Setting dcdom:hasNumberOfInstances for ?odv to ?val for ?c)]

[forwardClassifierTransferHasMissingValues:
  print(Firing forwardClassifierTransferHasMissingValues)
       (?c rdf:type pcdom:ClassifierClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
#       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvmodel dcdom:hasMissingValues ?val) -> (?odv dcdom:hasMissingValues ?val),
  print(Setting dcdom:hasMissingValues for ?odv to ?val for ?c)]
    
[forwardClassifierTransferHasDomain:
  print(Firing forwardClassifierTransferHasDomain)
       (?c rdf:type pcdom:ClassifierClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
#      (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvmodel dcdom:hasDomain ?val) 
       -> (?idvdata dcdom:hasDomain ?val),
  print(Setting dcdom:hasDomain for ?odv to ?val for ?c)]
              
[forwardResampleMetricsTransfer:
  print(Firing forwardResampleMetricsTransfer)
       (?c rdf:type pcdom:ResampleClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?idv ?p ?val) (?p rdfs:subPropertyOf dc:hasMetrics) -> (?odv ?p ?val),
  print(Transferring dc:hasMetrics forward for ?c)]

# hmm, how do the following rules relate to each other
[forwardResampleDataMetricsTransfer:
  print(Firing forwardResampleDataMetricsTransfer)
       (?c rdf:type pcdom:ResampleClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?idv ?p ?val) (?p rdfs:subPropertyOf dc:hasDataMetrics) 
       notEqual(?p dcdom:isSampled) -> (?odv ?p ?val),
  print(Transferring dc:hadDataMetrics forward for ?c)]

# how does this relate to the one above
[forwardResampleTransferIsSampled:
  print(Firing forwardResampleTransferIsSampled)
       (?c rdf:type pcdom:ResampleClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       -> (?odv dcdom:isSampled "true"^^xsd:boolean),
  print(Setting isSampled to true for ?odv)]
  
# Forward Metadata Propagation for Randomize
[forwardRandomizeMetricsTransfer:
  print(Firing forwardRandomizeMetricsTransfer)
       (?c rdf:type pcdom:RandomizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?idv ?p ?val) (?p rdfs:subPropertyOf dc:hasMetrics) -> (?odv ?p ?val),
  print(Transferring dc:hasMetrics forward for ?c)]

[forwardRandomizeDataMetricsTransfer:
  print(Firing forwardRandomizeDataMetricsTransfer)
       (?c rdf:type pcdom:RandomizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?idv ?p ?val) (?p rdfs:subPropertyOf dc:hasDataMetrics) 
       notEqual(?p dcdom:isRandomized) -> (?odv ?p ?val),
  print(Transferring dc:hasDataMetrics forward for ?c)]

[forwardRandomizeTransferIsRandomized:
  print(Firing randomizeTransferIsRandomized)
       (?c rdf:type pcdom:RandomizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       -> (?odv dcdom:isRandomized "true"^^xsd:boolean),
  print(Setting isRandomized for ?odv for ?c to true)]   

[forwardRandomizeRDFTypeTransfer:
  print(Firing backwardRandomizeRDFTypeTransfer)
  (?c rdf:type pcdom:RandomizeClass)
  (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
  (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
  (?odv rdf:type ?ot) -> (?idv rdf:type ?ot),
  print(Setting rdf:type of ?odv to ?ot because ?idv has rdf:type ?ot)]

# Forward Metadata Propagation for Discretize
[forwardDiscretizeMetricsTransfer:
  print(Firing forwardDiscretizeMetricsTransfer)
       (?c rdf:type pcdom:DiscretizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?idv ?p ?val) (?p rdfs:subPropertyOf dc:hasMetrics) -> (?odv ?p ?val),
  print(Transferring dc:hasMetrics forward for ?c)]

[forwardDiscretizeDataMetricsTransfer:
  print(Firing forwardDiscretizeDataMetricsTransfer)
       (?c rdf:type pcdom:DiscretizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?idv ?p ?val) (?p rdfs:subPropertyOf dc:hasDataMetrics) 
       notEqual(?p dcdom:isDiscrete) -> (?odv ?p ?val),
  print(Transferring dc:hasDataMetrics forward for ?c)]

[forwardDiscretizeTransferIsDiscrete:
  print(Firing forwardDiscretizeTransferIsDiscrete)
       (?c rdf:type pcdom:DiscretizeClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?idv dcdom:isDiscrete ?x) bound(?x)
       -> (?odv dcdom:isDiscrete "true"^^xsd:boolean),
  print(Setting isDiscrete for ?odv for ?c to true)]

[parameterResampleNumberOfInstances:
  print(Firing parameterResampleNumberOfInstances)
       (?c rdf:type pcdom:ResampleClass)
       (?c pc:hasInput ?idv) (?c pc:hasInput ?ipv) 
       (?idv pc:hasArgumentID "inputData")
       (?ipv pc:hasArgumentID "numberToSample")
       (?idv dcdom:hasNumberOfInstances ?x) noValue(?ipv ac:hasValue)
       -> (?ipv ac:hasValue ?x),
  print(Setting ?ipv of ?c to ?x because ?ipv had no value)]

# hmm, does this rule make sense?
[parameterDiscretizeNumberOfBins:
  print(Firing parameterDiscretizeNumberOfBins)
       (?c rdf:type pcdom:DiscretizeClass)
       (?c pc:hasInput ?idv) (?c pc:hasInput ?ipv) 
       (?idv pc:hasArgumentID "inputData")
       (?ipv pc:hasArgumentID "numberOfBins")
       (?idv dcdom:hasNumberOfBins ?x)
       -> (?ipv ac:hasValue ?x),
  print('Component:' ?c, ?idv has numberOfBins - setting ?ipv to ?x  not sure if this is necessary)]

[javaHeapSizeUpperRange:
       print(Firing rule javaHeapSizeUpperRange)
       (?c rdf:type pcdom:ModelerClass)
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
       (?c pc:hasInput ?ipv) (?ipv pc:hasArgumentID "javaHeapSize")
       (?idv dcdom:hasSizeInKB ?x) ge(?x 200000) 
       -> (?ipv ac:hasValue "1024M"),
       print(Setting ,?ipv to 1024M because ,?x is greater than 200000)]

[javaHeapSizeMiddleRange:
  print(Firing rule javaHeapSizeMiddleRange)
       (?c rdf:type pcdom:ModelerClass)
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
       (?c pc:hasInput ?ipv) (?ipv pc:hasArgumentID "javaHeapSize")
       (?idv dcdom:hasSizeInKB ?x) ge(?x 20000) lessThan(?x 200000) 
       -> (?ipv ac:hasValue "512M")
   print(Setting ,?ipv to 512M because 20000 <= ,?x < 200000)]

[javaHeapSizeLowerRange:
  print(Firing rule javaHeapSizeLowerRange)
       (?c rdf:type pcdom:ModelerClass)
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
       (?c pc:hasInput ?ipv) (?ipv pc:hasArgumentID "javaHeapSize")
       (?idv dcdom:hasSizeInKB ?x) lessThan(?x 20000) 
       -> (?ipv ac:hasValue "128M")
  print(Setting ,?ipv to 128M because ,?x is less than 20000)]


# Default value for classIndex
[parameterClassIndexDefaultForModeler:
  print(Firing parameterClassIndexDefaultForModeler)
    (?c rdf:type pcdom:ModelerClass)
    (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
    (?c pc:hasInput ?ipv) (?ipv pc:hasArgumentID "classIndex")
    (?idv dcdom:hasClassIndex ?ci)
    -> (?ipv ac:hasValue ?ci),
  print(Setting ,?ipv of ?c to ?ci because ?idv hasClassIndex ?ci)]

[parameterClassIndexDefaultForDiscretize:
    print(firing parameterClassIndexDefaultForDiscrete)
    (? rdf:type pcdom:DiscretizeClass)
    (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
    (?c pc:hasInput ?ipv) (?ipv pc:hasArgumentID "classIndex")
    (?idv dcdom:hasClassIndex ?ci) -> (?ipv ac:hasValue ?ci),
    print(Setting classIndex of Discretize to ?ci,  because the ?idv has ?ci)]

[parameterClassIndexDefaultClassifier:
    print(firing parameterClassIndexDefaultClassifier)
    (? rdf:type pcdom:ClassifierClass)
    (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "testData")
    (?c pc:hasInput ?ipv) (?ipv pc:hasArgumentID "classIndex")
    (?idv dcdom:hasClassIndex ?ci) -> (?ipv ac:hasValue ?ci),
    print(Setting classIndex of Discretize to ?ci,  because the ?idv has ?ci)]

# Component Invalidity Rules
# --------------------------
# Shouldn't we be checking against inputData?
[invalidityResampleIsSampled:
  print(Firing invalidityResampleIsSampled)
       (?c rdf:type pcdom:ResampleClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "outputData")
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "inputData")
       (?odv dcdom:isSampled "false"^^xsd:boolean) 
       -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(WARN WARN is this rule correct???)]

[invalidityClassifierAreaConsistent:
  print(Firing invalidityClassifierAreaConsistent)
       (?c rdf:type pcdom:ClassifierClass)
#      i don't think we need classification here
#      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvmodel dcdom:hasArea ?val1) (?idvdata dcdom:hasArea ?val2) 
       notEqual(?val1, ?val2) -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(ERROR : Template is invalid because ?idvmodel hasArea ?val1 and ?idvdata hasArea ?val2 are not equal.)]

[invalidityClassifierDomainConsistent:
  print(Firing invalidityClassifierDomainConsistent)
       (?c rdf:type pcdom:ClassifierClass)
#      i don't think that we need classification here
#      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvmodel dcdom:hasDomain ?val1) (?idvdata dcdom:hasDomain ?val2) 
       notEqual(?val1, ?val2) -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(ERROR : Template is invalid because ?idvmodel hasDomain ?val1 and ?idvdata hasDomain ?val2 are not equal.)] 

# this rule is outputing the following for ID3ModelThenClassify template
# Template is invalid because model isDiscrete true and testData isDiscrete model_isDiscrete are not equal.
# Template is invalid because model isDiscrete model_isDiscrete and testData isDiscrete true are not equal.            
# [invalidityClassifierIsDiscreteConsistent:
#   print(Firing invalidityClassifierIsDiscreteConsistent) 
#        (?c rdf:type pcdom:ClassifierClass)
#        (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
#        (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
#        (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
#        (?idvmodel dcdom:isDiscrete ?val1) (?idvdata dcdom:isDiscrete ?val2) 
#        notEqual(?val1, ?val2) -> (?c ac:isInvalid "true"^^xsd:boolean),
#   print(ERROR : Template is invalid because ?idvmodel isDiscrete ?val1 and ?idvdata isDiscrete ?val2 are not equal.)]

[invalidityClassifierNumberOfBinsConsistent:
   print(Firing invalidityClassifierNumberOfBinsConsistent)
       (?c rdf:type pcdom:ClassifierClass)
#      no need to check the classification
#      (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvmodel dcdom:hasNumberOfBins ?val1) (?idvdata dcdom:hasNumberOfBins ?val2) 
       notEqual(?val1, ?val2) -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(ERROR : Template is invalid because ?idvmodel hasNumberOfBins ?val1 and ?idvdata hasNumberOfBins ?val2 are not equal.)]

[invalidityClassifierClassIndexConsistent:
  print(Firing invalidityClassifierClassIndexConsistent) 
       (?c rdf:type pcdom:ClassifierClass)
       (?c pc:hasOutput ?odv) (?odv pc:hasArgumentID "classification")
       (?c pc:hasInput ?idvmodel) (?idvmodel pc:hasArgumentID "model")
       (?c pc:hasInput ?idvdata) (?idvdata pc:hasArgumentID "testData")       
       (?idvmodel dcdom:hasClassIndex ?val1) (?idvdata dcdom:hasClassIndex ?val2) 
       notEqual(?val1, ?val2) -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(ERROR : Template is invalid because ?idvmodel hasClassIndex ?val1 and ?idvdata hasClassIndex ?val2 are not equal.)]

[invalidityDTClassifiersCantConsumeBayesModels:
  print(Firing invalidityDTClassifiersCantConsumeBayesModels)
       (?c rdf:type pcdom:DTClassifierClass)
       (?c pc:hasInput ?idv) (?idv rdf:type dcdom:BayesModel)
        -> (?c ac:isInvalid "true"^^xsd:boolean)
  print(Template is invalid because ?idv has rdf:type BayesModel and DTClassifiers cant consume BayesModels)]

[invalidityBayesClassifiersCantConsumeDTModels:
   print(Firing invalidityBayesClassifiersCantConsumeDTModels)
       (?c rdf:type pcdom:BayesClassifierClass)
       (?c pc:hasInput ?idv) (?idv rdf:type dcdom:DTModel)
        -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(ERROR : Template is invalid because ?idv has rdf:type DTModel and BayesClassifiers cant consume DTModels)]

[invalidityDTModelerCantGenerateBayesModel:
  print(Firing invalidityDTModelerCantGenerateBayesModel)
       (?c rdf:type pcdom:DTModelerClass)
       (?c pc:hasOutput ?odv) (?odv rdf:type dcdom:BayesModel)
        -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(Template is invalid because ?odv cant be rdf:type BayesModel)]

[invalidityBayesModelerCantGenerateDTModel:
  print(Firing invalidityBayesModelerCantGenerateDTModel)
       (?c rdf:type pcdom:BayesModelerClass)
       (?c pc:hasOutput ?odv) (?odv rdf:type dcdom:DTModel)
        -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(ERROR : Template is invalid because ?odv cant be rdf:type DTModel)]

[invalidityID3ModelerCantConsumeDataWithMissingValues:
   print(Firing invalidityID3ModelerCantConsumeDataWithMissingValues)
       (?c rdf:type pcdom:ID3ModelerClass) (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")  
       (?idv dcdom:hasMissingValues "true"^^xsd:boolean)
       -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(ERROR : Template is invalid because ?idv hasMissingValues and ID3Modeler cant consume data with missing values)]

[invalidityLMTModelerCantConsumeDataWithMissingValues:
  print(Firing invalidityLMTModelerCantConsumeDataWithMissingValues)
       (?c rdf:type pcdom:LMTModelerClass) (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
       (?idv dcdom:hasMissingValues "true"^^xsd:boolean)
       -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(ERROR : Template is invalid because ?idv hasMissingValues and LMTModeler cant consume data with missing values)]

[invalidityLMTModelerCantModelLargeFiles:
  print(Firing rule invalidityLMTModelerCantModelLargeFiles)
       (?c rdf:type pcdom:LMTModelerClass)
       (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
       (?idv dcdom:hasSizeInKB ?x) greaterThan(?x 30000)
       -> (?c ac:isInvalid "true"^^xsd:boolean)
  print(ERROR : Template is invalid because ?idv is too large ?x > 30000 for LMTModeler)]

[invalidityID3ModelerConsumesOnlyDiscreteInstances:
  print(Firing invalidityID3ModelerConsumesOnlyDiscreteInstances)
    (?c rdf:type pcdom:ID3ModelerClass) 
    (?c pc:hasInput ?idv)
    (?idv pc:hasArgumentID "trainingData")
    (?idv dcdom:isDiscrete "false"^^xsd:boolean)
    -> (?c ac:isInvalid "true"^^xsd:boolean),
  print(ERROR : Template is invalid because ?idv is not discrete and ID3Modeler can only consume data with non-numeric '(nominal)' values)]

# [invalidityID3ClassifierConsumesOnlyDiscreteInstances:
#   print(Firing invalidityID3ClassifierConsumesOnlyDiscreteInstances)
#     (?c rdf:type pdcdom:ID3ClassifierClass) 
#     (?c pc:hasInput ?idv)
#     (?idv pc:hasArgumentID "testData")
#     (?idv dcdom:isDiscrete "false"^^xsd:boolean)
#     -> (?c ac:isInvalid "true"^^xsd:boolean),
#   print(ERROR : Template is invalid because ?idv is not discrete and ID3Classifier can only consume data with non-numeric '(nomial)' values)]

# [invalidityDTModelerCantConsumeDataThatIsDiscrete:
#   print(Firing invalidityDTModelerCantConsumeDataThatIsDiscrete)
#        (?c rdf:type pcdom:DTModelerClass) (?c pc:hasInput ?idv) (?idv pc:hasArgumentID "trainingData")
#        (?idv dcdom:isDiscrete "false"^^xsd:boolean)
#        -> (?c ac:isInvalid "true"^^xsd:boolean),
#   print(ERROR : Template is invalid because ?idv isDiscrete and DTModeler cant consume non-discrete data)]

