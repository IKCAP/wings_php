package edu.isi.ikcap.wings.workflows.util;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.UUID;

public class UuidGen {
	/**
	 * current uuids are generated by: <prefix>-UUID.randomUUID(), java UUIDs
	 * are 36 characters long the MySQL tables use VARCHAR(64) for primary keys,
	 * so we allow 27 + "-" characters in the prefix
	 */
	static int MAXIMUM_LENGTH_OF_UUID_PREFIX = 22; // Changed to 22 to allow
													// _<index> suffixes for
													// daxes

	/**
	 * returns a uuid with queryIndicator at the prefix e.g.
	 * generateAUuid("q4.2") ==> q4.2-a6d237a7-1ca6-4a63-86d0-2334a83448e8 max
	 * length of prefix is 27 characters if the prefix has length > 27, then the
	 * prefix is truncated to 27 characters
	 * 
	 * @param prefix
	 *            a prefix e.g. q4.2, q3.1 etc.
	 * @return a uuid prepended with prefix and a hyphen
	 */
	public static String generateAUuid(String prefix) {
		int prefixLength = prefix.length();
		if (prefixLength > MAXIMUM_LENGTH_OF_UUID_PREFIX) {
			prefix = prefix.subSequence(0, MAXIMUM_LENGTH_OF_UUID_PREFIX).toString();
		}
		StringBuilder result = new StringBuilder();
		UUID uuid = UUID.randomUUID();
		if (!prefix.equals("")) {
			result.append(prefix);
			result.append("-");
		}
		result.append(uuid.toString());
		return result.toString();
	}

	private static String convertToHex(byte[] data) {
		StringBuffer buf = new StringBuffer();
		for (int i = 0; i < data.length; i++) {
			int halfbyte = (data[i] >>> 4) & 0x0F;
			int two_halfs = 0;
			do {
				if ((0 <= halfbyte) && (halfbyte <= 9))
					buf.append((char) ('0' + halfbyte));
				else
					buf.append((char) ('a' + (halfbyte - 10)));
				halfbyte = data[i] & 0x0F;
			} while (two_halfs++ < 1);
		}
		return buf.toString();
	}

	public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
		MessageDigest md;
		md = MessageDigest.getInstance("SHA-1");
		byte[] sha1hash = new byte[40];
		md.update(text.getBytes("iso-8859-1"), 0, text.length());
		sha1hash = md.digest();
		return convertToHex(sha1hash);
	}
}
